# Generated by Django 3.0 on 2020-01-13 10:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import fernet_fields.fields
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('orchestrator', '0001_v012'),
    ]

    operations = [
        migrations.CreateModel(
            name='PythonFunction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Specify the name of the Python function.', max_length=255, unique=True)),
                ('description', fernet_fields.fields.EncryptedTextField(help_text='Specify a description of the Python function.')),
                ('encrypted_value_1', fernet_fields.fields.EncryptedCharField(blank=True, help_text="Specify an optional encrypted value to use in the Python function. To retrieve the value in the code, reference the 'encrypted_value_1' variable.", max_length=255)),
                ('encrypted_value_2', fernet_fields.fields.EncryptedCharField(blank=True, help_text="Specify an optional encrypted value to use in the Python function. To retrieve the value in the code, reference the 'encrypted_value_2' variable.", max_length=255)),
                ('encrypted_value_3', fernet_fields.fields.EncryptedCharField(blank=True, help_text="Specify an optional encrypted value to use in the Python function. To retrieve the value in the code, reference the 'encrypted_value_3' variable.", max_length=255)),
                ('encrypted_value_4', fernet_fields.fields.EncryptedCharField(blank=True, help_text="Specify an optional encrypted value to use in the Python function. To retrieve the value in the code, reference the 'encrypted_value_4' variable.", max_length=255)),
                ('encrypted_value_5', fernet_fields.fields.EncryptedCharField(blank=True, help_text="Specify an optional encrypted value to use in the Python function. To retrieve the value in the code, reference the 'encrypted_value_5' variable.", max_length=255)),
                ('code', fernet_fields.fields.EncryptedTextField(default='## This is some descriptive code to help you use the Python function.\n## Simple calculation example :\n# x = int(input)\n# y = 5\n# output = x * 5\n## The returned response for this function will be:\n# \'{"output": X}\'\n## -----------------------------------------------------------------------------------------------------------\n## Simple SMTP example:\n# from smtplib import SMTP, SMTP_SSL\n# from email.message import EmailMessage\n# msg = EmailMessage()\n# msg[\'Subject\'] = "Testing SMTP"\n# msg[\'From\'] = input\n# msg[\'To\'] = input\n# with SMTP("smtp.office365.com", 587) as server:\n#   server.starttls()\n#   server.login(input, encrypted_value_1)\n#   server.send_message(msg)\n# output = "Email sent successfully!"\n## The returned response for this function will be:\n# \'{"output": "Email sent successfully!"}\'', help_text="Specify the code of the Python function. To retrieve the input served by the API call, reference the 'input' variable. The value of the variable 'output' will be returned in the API response.")),
                ('activated', models.BooleanField(default=False, help_text='Specify whether the trigger should be active.')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.RenameModel(
            old_name='Execution',
            new_name='BotflowExecution',
        ),
        migrations.AddField(
            model_name='emailimaptrigger',
            name='status',
            field=models.CharField(default='Working', editable=False, help_text='Indicates the status of the trigger.', max_length=255),
        ),
        migrations.AddField(
            model_name='emailoutlooktrigger',
            name='status',
            field=models.CharField(default='Working', editable=False, help_text='Indicates the status of the trigger.', max_length=255),
        ),
        migrations.AddField(
            model_name='filetrigger',
            name='status',
            field=models.CharField(default='Working', editable=False, help_text='Indicates the status of the trigger.', max_length=255),
        ),
        migrations.AddField(
            model_name='historicalemailimaptrigger',
            name='status',
            field=models.CharField(default='Working', editable=False, help_text='Indicates the status of the trigger.', max_length=255),
        ),
        migrations.AddField(
            model_name='historicalemailoutlooktrigger',
            name='status',
            field=models.CharField(default='Working', editable=False, help_text='Indicates the status of the trigger.', max_length=255),
        ),
        migrations.AddField(
            model_name='historicalfiletrigger',
            name='status',
            field=models.CharField(default='Working', editable=False, help_text='Indicates the status of the trigger.', max_length=255),
        ),
        migrations.AddField(
            model_name='historicalscheduletrigger',
            name='status',
            field=models.CharField(default='Working', editable=False, help_text='Indicates the status of the trigger.', max_length=255),
        ),
        migrations.AddField(
            model_name='historicalsmtpaccount',
            name='date_created',
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='historicalsmtpaccount',
            name='date_updated',
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='historicalsmtpaccount',
            name='status',
            field=models.CharField(default='Working', editable=False, help_text='Indicates the status of the SMTP account.', max_length=255),
        ),
        migrations.AddField(
            model_name='scheduletrigger',
            name='status',
            field=models.CharField(default='Working', editable=False, help_text='Indicates the status of the trigger.', max_length=255),
        ),
        migrations.AddField(
            model_name='smtpaccount',
            name='date_created',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='smtpaccount',
            name='date_updated',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='smtpaccount',
            name='status',
            field=models.CharField(default='Working', editable=False, help_text='Indicates the status of the SMTP account.', max_length=255),
        ),
        migrations.AlterField(
            model_name='app',
            name='name',
            field=models.CharField(help_text='Specify the name of the application.', max_length=255, unique=True),
        ),
        migrations.AlterField(
            model_name='bot',
            name='name',
            field=models.CharField(help_text='Specify the name of the bot.', max_length=255, unique=True),
        ),
        migrations.AlterField(
            model_name='botflow',
            name='name',
            field=models.CharField(help_text='Specify the name of the botflow/script/file.', max_length=255, unique=True),
        ),
        migrations.AlterField(
            model_name='historicalapp',
            name='name',
            field=models.CharField(db_index=True, help_text='Specify the name of the application.', max_length=255),
        ),
        migrations.AlterField(
            model_name='historicalbot',
            name='name',
            field=models.CharField(db_index=True, help_text='Specify the name of the bot.', max_length=255),
        ),
        migrations.AlterField(
            model_name='historicalbotflow',
            name='name',
            field=models.CharField(db_index=True, help_text='Specify the name of the botflow/script/file.', max_length=255),
        ),
        migrations.AlterField(
            model_name='historicalsmtpaccount',
            name='email',
            field=models.EmailField(db_index=True, help_text='Specify the email of the SMTP account.', max_length=254),
        ),
        migrations.AlterField(
            model_name='smtpaccount',
            name='email',
            field=models.EmailField(help_text='Specify the email of the SMTP account.', max_length=254, unique=True),
        ),
        migrations.CreateModel(
            name='PythonFunctionExecution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_ip', fernet_fields.fields.EncryptedCharField(max_length=255)),
                ('input', fernet_fields.fields.EncryptedTextField()),
                ('output', fernet_fields.fields.EncryptedTextField()),
                ('code', fernet_fields.fields.EncryptedTextField()),
                ('time_start', models.DateTimeField(blank=True, null=True)),
                ('time_end', models.DateTimeField(blank=True, null=True)),
                ('python_function', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='orchestrator.PythonFunction')),
                ('request_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalPythonFunction',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='Specify the name of the Python function.', max_length=255)),
                ('description', fernet_fields.fields.EncryptedTextField(help_text='Specify a description of the Python function.')),
                ('encrypted_value_1', fernet_fields.fields.EncryptedCharField(blank=True, help_text="Specify an optional encrypted value to use in the Python function. To retrieve the value in the code, reference the 'encrypted_value_1' variable.", max_length=255)),
                ('encrypted_value_2', fernet_fields.fields.EncryptedCharField(blank=True, help_text="Specify an optional encrypted value to use in the Python function. To retrieve the value in the code, reference the 'encrypted_value_2' variable.", max_length=255)),
                ('encrypted_value_3', fernet_fields.fields.EncryptedCharField(blank=True, help_text="Specify an optional encrypted value to use in the Python function. To retrieve the value in the code, reference the 'encrypted_value_3' variable.", max_length=255)),
                ('encrypted_value_4', fernet_fields.fields.EncryptedCharField(blank=True, help_text="Specify an optional encrypted value to use in the Python function. To retrieve the value in the code, reference the 'encrypted_value_4' variable.", max_length=255)),
                ('encrypted_value_5', fernet_fields.fields.EncryptedCharField(blank=True, help_text="Specify an optional encrypted value to use in the Python function. To retrieve the value in the code, reference the 'encrypted_value_5' variable.", max_length=255)),
                ('code', fernet_fields.fields.EncryptedTextField(default='## This is some descriptive code to help you use the Python function.\n## Simple calculation example :\n# x = int(input)\n# y = 5\n# output = x * 5\n## The returned response for this function will be:\n# \'{"output": X}\'\n## -----------------------------------------------------------------------------------------------------------\n## Simple SMTP example:\n# from smtplib import SMTP, SMTP_SSL\n# from email.message import EmailMessage\n# msg = EmailMessage()\n# msg[\'Subject\'] = "Testing SMTP"\n# msg[\'From\'] = input\n# msg[\'To\'] = input\n# with SMTP("smtp.office365.com", 587) as server:\n#   server.starttls()\n#   server.login(input, encrypted_value_1)\n#   server.send_message(msg)\n# output = "Email sent successfully!"\n## The returned response for this function will be:\n# \'{"output": "Email sent successfully!"}\'', help_text="Specify the code of the Python function. To retrieve the input served by the API call, reference the 'input' variable. The value of the variable 'output' will be returned in the API response.")),
                ('activated', models.BooleanField(default=False, help_text='Specify whether the trigger should be active.')),
                ('date_created', models.DateTimeField(blank=True, editable=False)),
                ('date_updated', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical python function',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalApiTrigger',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('activated', models.BooleanField(default=False, help_text='Specify whether the trigger should be active.')),
                ('status', models.CharField(default='Working', editable=False, help_text='Indicates the status of the trigger.', max_length=255)),
                ('date_created', models.DateTimeField(blank=True, editable=False)),
                ('date_updated', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('app', models.ForeignKey(blank=True, db_constraint=False, help_text='Select the application for this trigger.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='orchestrator.App')),
                ('bot', models.ForeignKey(blank=True, db_constraint=False, help_text='Select the bot for this trigger.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='orchestrator.Bot')),
                ('botflow', models.ForeignKey(blank=True, db_constraint=False, help_text='Select the botflow for this trigger.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='orchestrator.Botflow')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical API trigger',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='ApiTrigger',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activated', models.BooleanField(default=False, help_text='Specify whether the trigger should be active.')),
                ('status', models.CharField(default='Working', editable=False, help_text='Indicates the status of the trigger.', max_length=255)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('app', models.ForeignKey(help_text='Select the application for this trigger.', on_delete=django.db.models.deletion.PROTECT, to='orchestrator.App')),
                ('bot', models.ForeignKey(help_text='Select the bot for this trigger.', on_delete=django.db.models.deletion.PROTECT, to='orchestrator.Bot')),
                ('botflow', models.ForeignKey(help_text='Select the botflow for this trigger.', on_delete=django.db.models.deletion.PROTECT, to='orchestrator.Botflow')),
            ],
            options={
                'verbose_name': 'API trigger',
                'verbose_name_plural': 'API triggers',
            },
        ),
    ]
